from aiogram import types, Dispatcher
from database import sql_check_user, sql_simple_check
from keyboards import register_kb, make_calendar
from functions import make_date


async def make_event(message: types.message):
    if not sql_check_user(f"select tg_id from user_table where tg_id ={message.from_user.id}") or \
            not sql_simple_check(f"select approved from user_table where tg_id={message.from_user.id}", "approved"):
        await message.delete()
        await message.answer("–ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=register_kb)
    else:
        if message.text == "üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":

            await message.delete()
            await message.answer(f"–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
                                 f"–¢–∞–∫ –∂–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ "
                                 f"<a href=moodle.tomtit.tomsk.ru>Moodle</a>\n\n"
                                 f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ <b>{make_date()}</b>", reply_markup=make_calendar())
            msg = await message.answer("asd")
            print(msg)


async def select_date(call: types.CallbackQuery):
    await call.message.answer(call.data)


async def my_events(message: types.Message):
    await message.answer("")


async def all_events(message: types.Message):
    await message.answer("")


def events_register(dp: Dispatcher):
    dp.register_message_handler(make_event, text="üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    dp.register_message_handler(my_events, text="üóí Ô∏è–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è")
    dp.register_message_handler(all_events, text="üìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è")

    dp.register_callback_query_handler(select_date, text_startswith='date_')
