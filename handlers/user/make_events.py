from aiogram import types, Dispatcher
from bot import database, sql
from bot.keyboards import register_kb, make_calendar, events_kb, cancel_booking, main_kb
from bot.functions import make_date, time_validator, split_time, to_quotes
from handlers.user.states import BookingState
from aiogram.dispatcher.storage import FSMContext


async def make_event(message: types.message):
    db = database.Database()
    if not db.sql_fetchone(f"select tg_id from user_table where tg_id ={message.from_user.id}") or \
            not db.sql_fetchone(f"select approved from user_table where tg_id={message.from_user.id}"):
        await message.delete()
        await message.answer("–ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=register_kb)
    else:
        if message.text == "üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
            await message.delete()
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            await message.answer(f"–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
                                 f"–¢–∞–∫ –∂–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ "
                                 f"<a href=moodle.tomtit.tomsk.ru>Moodle</a>\n\n"
                                 f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ <b>{make_date()}</b>", reply_markup=make_calendar())


async def select_date(call: types.CallbackQuery, state: FSMContext):
    db = database.Database()
    print(call.data)
    date = call.data.split("_")[1]

    booked = db.sql_fetchall(f"select events_table.e_start, events_table.e_end from events_table WHERE e_date = {to_quotes(date)}")
    await BookingState.start.set()
    await state.update_data(date=to_quotes(date))
    await state.update_data(owner=call.from_user.id)
    if len(booked) == 0:
        await call.message.edit_text("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–ø–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ", reply_markup=events_kb())
    else:
        await call.message.edit_text(sorted(booked, key=lambda t: t['e_start'], reverse=True), reply_markup=events_kb())


async def edit_date(call: types.CallbackQuery, state: FSMContext):

    await call.message.edit_text(f"–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
                                 f"–¢–∞–∫ –∂–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ "
                                 f"<a href=moodle.tomtit.tomsk.ru>Moodle</a>\n\n"
                                 f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ <b>{make_date()}</b>", reply_markup=make_calendar())
    print("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await state.finish()


async def booking_date(call: types.CallbackQuery):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏\n"
                                 "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\n"
                                 "13.00 15.30\n"
                                 "13.00-15.30\n"
                                 "13:00 15:30\n"
                                 "13.00-15.30\n", reply_markup=cancel_booking())
    # TODO: –ø–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
    # TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å

    await BookingState.time.set()


async def get_date(message: types.Message, state: FSMContext):
    if time_validator(message.text):
        time = split_time(message.text)
        await state.update_data(t_start=time[0])
        await state.update_data(t_end=time[1])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=cancel_booking())
        await BookingState.description.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

    # TODO: –æ–≥—Ä–∞–Ω –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞


async def send_event(message: types.Message, state: FSMContext):
    db = database.Database()
    await state.update_data(description=message.text)
    await state.update_data(approved=0)
    data = await state.get_data()
    await message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞", reply_markup=main_kb)
    await state.finish()
    # await message.answer(data)
    db.sql_query_send(sql.sql_send_event(data))


def events_register(dp: Dispatcher):
    dp.register_message_handler(make_event, text="üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    dp.register_callback_query_handler(select_date, text_startswith='date_')
    dp.register_callback_query_handler(edit_date, text=['change', 'cancel_booking'], state=[BookingState.start,
                                                                                            BookingState.time,
                                                                                            BookingState.description])
    dp.register_callback_query_handler(booking_date, text='booking', state=BookingState.start)
    dp.register_message_handler(get_date, state=BookingState.time)
    dp.register_message_handler(send_event, state=BookingState.description)
