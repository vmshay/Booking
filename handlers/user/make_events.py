import asyncio
import aiogram
from aiogram import types, Dispatcher
from bot import database, sql
from bot.keyboards import register_kb, make_calendar, events_kb, cancel_booking, main_kb
from bot.functions import make_date, date_range, time_validator, normalize_time, to_quotes, check_overlap, beauty_booked_time
from handlers.user.states import BookingState
from aiogram.dispatcher.storage import FSMContext
from bot import messages
from handlers.admin.notifications import new_event
import datetime


async def make_event(message: types.message):
    db = database.Database()
    if not db.sql_fetchone(f"select tg_id from user_table where tg_id ={message.from_user.id}") or \
            not db.sql_fetchone(f"select approved from user_table where tg_id={message.from_user.id}"):
        await message.delete()
        await message.answer(messages.non_register, reply_markup=register_kb)
    else:
        if message.text == "üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
            await message.delete()
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            msg = await message.answer(messages.events_welcome(make_date()), reply_markup=make_calendar())
            await asyncio.sleep(60)
            await msg.delete()


async def select_date(call: types.CallbackQuery, state: FSMContext):
    db = database.Database()
    date = call.data.split("_")[1]
    booked = db.sql_fetchall(sql.sql_booked_time(date))
    today = datetime.datetime.now()
    if date >= datetime.datetime.strftime(today, '%Y-%m-%d'):
        if len(booked) == 0:
            await BookingState.start.set()
            await state.update_data(date=to_quotes(date))
            await state.update_data(owner=call.from_user.id)
            msg = await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n"
                                               f"–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ", reply_markup=events_kb())
            await asyncio.sleep(30)
            await msg.delete()
        else:
            await BookingState.start.set()
            await state.update_data(date=to_quotes(date))
            await state.update_data(owner=call.from_user.id)
            msg = await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n\n"
                                               f"–ó–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è\n\n"
                                               f"{beauty_booked_time(sorted(booked, key=lambda t: t['e_start'], reverse=False))}",
                                               reply_markup=events_kb())
            await asyncio.sleep(60)
            await msg.delete()
    else:
        msg = await call.message.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π")
        await asyncio.sleep(5)
        await msg.delete()


async def edit_date(call: types.CallbackQuery, state: FSMContext):
    msg = await call.message.edit_text(f"–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
                                       f"–¢–∞–∫ –∂–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ "
                                       f"<a href=moodle.tomtit-tomsk.ru>Moodle</a>\n\n"
                                       f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ <b>{make_date()}</b>", reply_markup=make_calendar())
    await call.message.delete()
    await state.finish()
    await asyncio.sleep(30)
    await msg.delete()


async def booking_date(call: types.CallbackQuery):
    msg = await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏\n"
                                    "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\n\n"
                                    "13.00 15.30\n"
                                    "13.00-15.30\n"
                                    "13:00 15:30\n"
                                    "13.00-15.30\n", reply_markup=cancel_booking())
    await BookingState.time.set()
    await asyncio.sleep(20)
    await msg.delete()


async def get_time(message: types.Message, state: FSMContext):
    # –ü–∞—Ä—Å–∏–º —Ç–æ —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    time = normalize_time(message.text)
    await message.delete()
    # –ó–∞–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    date = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    if time_validator(message.text):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—Ç –Ω–µ –ø–æ–∑–∂–µ –∫–æ–Ω—Ü–∞
        if time[0] > time[1]:
            msg = await message.answer("–ù–∞—á–∞–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω—Ü–∞")
            await asyncio.sleep(5)
            await msg.delete()
        elif not check_overlap(time[0], time[1], date['date']):
            msg = await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ–µ—Ä—Å–µ–∫–∞–µ—Ç—Å—è")
            await asyncio.sleep(5)
            await msg.delete()
        else:
            await state.update_data(t_start=time[0])
            await state.update_data(t_end=time[1])
            await BookingState.description.set()
            msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=cancel_booking())
            await asyncio.sleep(10)
            await msg.delete()
    else:
        msg = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        await asyncio.sleep(5)
        await msg.delete()


async def send_event(message: types.Message, state: FSMContext):
    db = database.Database()
    if len(message.text) > 100:
        msg = await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
        await asyncio.sleep(5)
        await msg.delete()
        await message.delete()
    else:
        await state.update_data(description=message.text)
        await state.update_data(approved=0)
        data = await state.get_data()
        await message.delete()
        msg = await message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞", reply_markup=main_kb)
        await asyncio.sleep(5)
        await msg.delete()
        await state.finish()
        db.sql_query_send(sql.sql_send_event(data))
        await new_event()


def events_register(dp: Dispatcher):
    dp.register_message_handler(make_event, text="üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    dp.register_callback_query_handler(select_date, text_startswith='date_')
    dp.register_callback_query_handler(edit_date, text=['change', 'cancel_booking'], state=[BookingState.start,
                                                                                            BookingState.time,
                                                                                            BookingState.description])
    dp.register_callback_query_handler(booking_date, text='booking', state=BookingState.start)
    dp.register_message_handler(get_time, state=BookingState.time)
    dp.register_message_handler(send_event, state=BookingState.description)
