import asyncio
import calendar
from datetime import date, datetime

from aiogram import types, Dispatcher
from aiogram.dispatcher.storage import FSMContext

from bot import database, sql
from bot.functions import make_date, time_validator, normalize_time, to_quotes, check_overlap, beauty_booked_time
from bot.keyboards import make_calendar, events_kb, cancel_booking, main_kb
from bot.notifications import new_event
from bot.states import BookingState


async def make_event(call: types.CallbackQuery):

    today = date.today()
    month = today.month
    days_in_month = calendar.monthrange(today.year, month)[1]
    db = database.Database()
    text = (f"–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
            f"–¢–∞–∫ –∂–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ "
            f"<a href=moodle.tomtit-tomsk.ru>Moodle</a>\n\n"
            f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ <b>{make_date()}</b>")
    await call.message.edit_text(text, reply_markup=make_calendar(month,
                                                                  days_in_month,
                                                                  f"month_prev:{month}",
                                                                  f"month_next:{month}"))


async def select_date(call: types.CallbackQuery, state: FSMContext):
    db = database.Database()
    username = db.sql_fetchone(f"select name from user_table where tg_id = {call.from_user.id}")
    await state.update_data(username=username)
    date = call.data.split("_")[1]
    booked = db.sql_fetchall(sql.sql_booked_time(date))
    today = datetime.strftime(datetime.today(), '%Y-%m-%d')
    t_day = today.split("-")[2]
    t_month = today.split("-")[1]

    if int(date.split("-")[1]) == int(t_month):
        if int(date.split("-")[2]) >= int(t_day):
            if len(booked) == 0:
                await BookingState.start.set()
                await state.update_data(date=to_quotes(date))
                await state.update_data(owner=call.from_user.id)
                await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n"
                                             f"–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ", reply_markup=events_kb())
            else:
                await BookingState.start.set()
                await state.update_data(date=to_quotes(date))
                await state.update_data(owner=call.from_user.id)
                await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n\n"
                                             f"–ó–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è\n\n"
                                             f"{beauty_booked_time(sorted(booked, key=lambda t: t['e_start'], reverse=False))}",
                                             reply_markup=events_kb())
        else:
            msg = await call.message.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π")
            await asyncio.sleep(5)
            await msg.delete()
    elif int(date.split("-")[1]) > int(t_month):
        if len(booked) == 0:
            await BookingState.start.set()
            await state.update_data(date=to_quotes(date))
            await state.update_data(owner=call.from_user.id)
            await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n"
                                         f"–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ", reply_markup=events_kb())
        else:
            await BookingState.start.set()
            await state.update_data(date=to_quotes(date))
            await state.update_data(owner=call.from_user.id)
            await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}\n\n"
                                         f"–ó–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è\n\n"
                                         f"{beauty_booked_time(sorted(booked, key=lambda t: t['e_start'], reverse=False))}",
                                         reply_markup=events_kb())
    else:
        msg = await call.message.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π")
        await asyncio.sleep(5)
        await msg.delete()


async def edit_date(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç 405 –∫–∞–±–∏–Ω–µ—Ç–∞ü§ñ\n"
                                 f"–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n\n"
                                 f"–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
                                 f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>\n"
                                 f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
                                 f"<b>–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è</b>\n"
                                 f"–°–æ–±—ã—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –í–∞–º–∏\n\n"
                                 f"<b>–í—Å–µ —Å–æ–±—ã—Ç–∏—è</b>\n"
                                 f"–°–æ–±—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                 f"—Å –≤—ã–±–æ—Ä–∫–æ–π –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º\n\n"
                                 f"–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è\n"
                                 f"–ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @FeldwebelWillman\n"
                                 f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤—Ç–∞—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é /feedback",
                                 reply_markup=main_kb())
    await state.finish()


async def booking_date(call: types.CallbackQuery):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏\n"
                              "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\n\n"
                              "13.00 15.30\n"
                              "8.00-9.00\n"
                              "10:30 14:00\n"
                              "11.50-12.30\n", reply_markup=cancel_booking())
    await BookingState.time.set()


async def get_time(message: types.Message, state: FSMContext):
    # –ü–∞—Ä—Å–∏–º —Ç–æ —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    time = normalize_time(message.text)
    await message.delete()
    date = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    if time_validator(message.text):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—Ç –Ω–µ –ø–æ–∑–∂–µ –∫–æ–Ω—Ü–∞
        if time[0] > time[1]:
            await message.answer("–ù–∞—á–∞–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω—Ü–∞")
        elif not check_overlap(time[0], time[1], date['date']):
            await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ–µ—Ä—Å–µ–∫–∞–µ—Ç—Å—è")

        else:
            await state.update_data(t_start=time[0])
            await state.update_data(t_end=time[1])
            await BookingState.description.set()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=cancel_booking())

    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")


async def send_event(message: types.Message, state: FSMContext):
    db = database.Database()
    if len(message.text) > 100:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")

    else:

        await state.update_data(description=message.text)
        await state.update_data(approved=0)
        data = await state.get_data()
        db.sql_query_send(sql.sql_send_event(data))
        await message.delete()
        await message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞\n"
                             "–£–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
                             "–æ–Ω–∏ –ø–æ–ª—É—á–∞—Ç –æ–ø–æ–≤–æ—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                             "–î–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        event_id = db.sql_fetchone('select max(id) from events_table')
        await state.update_data(id=event_id)
        data = await state.get_data()
        await state.finish()
        await new_event(data)


def register(dp: Dispatcher):
    dp.register_callback_query_handler(make_event, text='plain')
    dp.register_callback_query_handler(select_date, text_startswith='date_')
    dp.register_callback_query_handler(edit_date, text='cancel_booking')
    dp.register_callback_query_handler(booking_date, text='booking', state=BookingState.start)
    dp.register_callback_query_handler(edit_date, text=['change', 'cancel_booking'], state=[BookingState.start,
                                                                                            BookingState.time,
                                                                                            BookingState.description])

    dp.register_message_handler(get_time, state=BookingState.time)
    dp.register_message_handler(send_event, state=BookingState.description)