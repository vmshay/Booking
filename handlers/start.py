import asyncio
from aiogram import types, Dispatcher
from bot.keyboards import main_kb, register_kb
from bot import database
from bot import sql
from aiogram.dispatcher.storage import FSMContext
from bot.states import SendBugState, MessageToAll
from bot.notifications import new_bug


# @dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    db = database.Database()
    if message.chat.type == 'private':
        if not db.sql_fetchone(sql.check_id(message.from_user.id)):
            await message.answer(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç 405 –∫–∞–±–∏–Ω–µ—Ç–∞ü§ñ\n"
                                 f"\n"
                                 f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                                 f"", reply_markup=register_kb())
        elif db.sql_fetchone(f'select approved from user_table where tg_id ={message.from_user.id}') == '0':
            msg = await message.answer("–ê–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            await asyncio.sleep(5)
            await msg.delete()
        else:

            await message.answer(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç 405 –∫–∞–±–∏–Ω–µ—Ç–∞ü§ñ\n"
                                   f"–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n\n"
                                   f"–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
                                   f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>\n"
                                   f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
                                   f"<b>–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è</b>\n"
                                   f"–°–æ–±—ã—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –í–∞–º–∏\n\n"
                                   f"<b>–í—Å–µ —Å–æ–±—ã—Ç–∏—è</b>\n"
                                   f"–°–æ–±—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                   f"—Å –≤—ã–±–æ—Ä–∫–æ–π –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º\n\n"
                                   f"–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è\n"
                                   f"–ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @FeldwebelWillman\n"
                                   f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤—Ç–∞—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é /feedback",
                                   reply_markup=main_kb())
    # else:
    #     await message.answer(f"–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ , –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ 405"
    #                          f"–Ω–∞–ø–∏—à–∏—Ç–µ –ª–∏—á–Ω–æ @TTITTechSuppBot")


async def stop_cmd(message: types.Message):
    if message.from_user.id == 338836490:
        await message.answer("–û—Å—Ç–∞–Ω–æ–≤–∫–∞")
    else:
        await message.answer("–Ø —Å–ª—É—à–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è")


async def send_report(message: types.Message):
    await message.delete()
    await SendBugState.send_bug.set()
    msg = await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É")
    await asyncio.sleep(60)
    await msg.delete()


async def get_report(message: types.Message, state: FSMContext):
    await state.update_data(bug=message.text)
    await state.update_data(from_user=message.from_user.username)
    data = await state.get_data()
    await state.finish()
    await new_bug(data)
    await message.delete()


async def broadcast_cmd(message: types.Message):
    await message.delete()
    await MessageToAll.send_message.set()
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ—å—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await asyncio.sleep(5)
    await msg.delete()


async def get_message(message: types.Message, state: FSMContext):
    await state.update_data(bug=message.text)
    await state.update_data(from_user=message.from_user.username)
    data = await state.get_data()
    await state.finish()
    await message_to_all(data)
    await message.delete()


def main_register(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=['start', 'help'])
    dp.register_message_handler(stop_cmd, commands=['stop'])
    dp.register_message_handler(send_report, commands=['feedback'])
    dp.register_message_handler(get_report, state=SendBugState.send_bug)
    dp.register_message_handler(broadcast_cmd, commands=['broadcast'])
    dp.register_message_handler(get_message, state=MessageToAll.send_message)

