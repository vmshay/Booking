import asyncio
from aiogram import types, Dispatcher
from bot.keyboards import main_kb, register_kb,   check_register_kb
from bot import database
from bot import sql
from aiogram.dispatcher.storage import FSMContext
from handlers.user.states import SendBugState, MessageToAll
from handlers.admin.notifications import new_bug, message_to_all


# @dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    db = database.Database()
    await message.delete()
    if not db.sql_fetchone(sql.check_id(message.from_user.id)):
        await message.answer(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∞–∫–µ–π –¢–¢–ò–¢ü§ñ\n\n"
                             "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n", reply_markup=register_kb)
    elif db.sql_fetchone(sql.check_approved(message.from_user.id)) == "0":
        await message.answer(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", reply_markup=check_register_kb)
    else:
        msg = await message.answer(f"ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∞–∫–µ–π –¢–¢–ò–¢ü§ñ\n"
                                   f"\n"
                                   f"–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ 405 –∞—É–¥–∏—Ç–æ—Ä–∏–∏.\n\n"
                                   f"–ú–µ–Ω—è –µ—â–µ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–∞—é—Ç –ø–æ —ç—Ç–æ–º—É —É–º–µ—é –Ω–µ–º–Ω–æ–≥–æ.\n\n"
                                   f"–í–æ—Ç –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                                   f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
                                   f"–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è\n"
                                   f"–í—Å–µ —Å–æ–±—ã—Ç–∏—è\n\n"
                                   f"–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è\n"
                                   f"–ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @FeldwebelWillman\n"
                                   f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤—Ç–∞—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é /feedback",
                                   reply_markup=main_kb)
        await asyncio.sleep(10)
        await msg.delete()


async def stop_cmd(message: types.Message):
    if message.from_user.id == 338836490:
        await message.answer("–û—Å—Ç–∞–Ω–æ–≤–∫–∞")
    else:
        await message.answer("–Ø —Å–ª—É—à–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è")


async def send_report(message: types.Message):
    await message.delete()
    await SendBugState.send_bug.set()
    msg = await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É")
    await asyncio.sleep(5)
    await msg.delete()


async def get_report(message: types.Message, state: FSMContext):
    await state.update_data(bug=message.text)
    await state.update_data(from_user=message.from_user.username)
    data = await state.get_data()
    await state.finish()
    await new_bug(data)
    await message.delete()


async def broadcast_cmd(message: types.Message):
    await message.delete()
    await MessageToAll.send_message.set()
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ—å—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await asyncio.sleep(5)
    await msg.delete()


async def get_message(message: types.Message, state: FSMContext):
    await state.update_data(bug=message.text)
    await state.update_data(from_user=message.from_user.username)
    data = await state.get_data()
    await state.finish()
    await message_to_all(data)
    await message.delete()


async def delete_all_msg(message: types.Message):
    await asyncio.sleep(5)
    await message.delete()


def main_register(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=['start', 'help'])
    dp.register_message_handler(stop_cmd, commands=['stop'])
    dp.register_message_handler(send_report, commands=['feedback'])
    dp.register_message_handler(get_report, state=SendBugState.send_bug)
    dp.register_message_handler(broadcast_cmd, commands=['broadcast'])
    dp.register_message_handler(get_message, state=MessageToAll.send_message)
    dp.register_message_handler(delete_all_msg)

